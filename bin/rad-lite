#!/bin/bash -e

# Use this to install rad-shell plugins w/o rad-shell

colorize() { CODE=$1; shift; echo -e '\033[0;'$CODE'm'$*'\033[0m'; }
bold() { echo -e "$(colorize 1 "$@")"; }
red() { echo -e "$(colorize '1;31' "$@")"; }
green() { echo -e "$(colorize 32 "$@")"; }
yellow() { echo -e "$(colorize 33 "$@")"; }

cleanup() {
  local exit_code=$1
  local previous_command=$BASH_COMMAND
  [[ $exit_code -ne 0 ]] && [[ ! $previous_command == exit* ]] && red "INFO: Script exited with code $exit_code from command $previous_command"
  exit $exit_code
}
trap 'cleanup $?' EXIT

abort() {
  red $1
  red "Exiting..."
  exit 1
}

# Validate arguments
usage() {
  yellow "usage: rad-lite [command] [args]"
  yellow "commands:"
  yellow "\tinstall: install the specified plugin(s)"
  yellow "\tinit: add 'eval \"\$(rad-lite init)\"' to your .bashrc/.zshrc file to source the plugins"
  yellow "\tlist: list the installed plugins"
  yellow "\timplode: remove all plugins and the ~/.rad-shell-lite directory"
  yellow "\thelp: print this message"
}

# Returns the local absolute path for a plugin file, derived from the file's URL
get-plugin-dir() {
  local plugin_dir gh_org gh_repo git_commit dir
  local plugin_url=$1

  if [[ "${plugin_url}" =~ ^https://[^/]+/([^/]+)/([^/]+)/blob/([^/]+)(/(.+))?/[^/]+$ ]]; then
    gh_org="${BASH_REMATCH[1]}"
    gh_repo="${BASH_REMATCH[2]}"
    git_commit="${BASH_REMATCH[3]}"

    plugin_dir="${rad_lite_plugins_dir}/${gh_org}/${gh_repo}/${git_commit}"

    echo "${plugin_dir}"
  else
    red "ERROR: Could not extract plugin name from URL: ${plugin_url}" >"$(tty)"
    return 1
  fi
}

# This needs to return a 'git://' repo path so we use the users ssh credentials
get-repo-path() {
  local plugin_dir gh_org gh_repo git_commit dir gh_domain
  local plugin_url=$1

  if [[ "${plugin_url}" =~ ^https://([^/]+)/([^/]+)/([^/]+)/blob/([^/]+)(/(.+))?/[^/]+$ ]]; then
    gh_domain="${BASH_REMATCH[1]}"
    gh_org="${BASH_REMATCH[2]}"
    gh_repo="${BASH_REMATCH[3]}"
    git_commit="${BASH_REMATCH[4]}"

    # git@ghe.megaleo.com:brandon-fryslie/rad-workday-plugin.git

    echo "git@${gh_domain}:${gh_org}/${gh_repo}.git"
  else
    red "ERROR: Could not extract repo path from URL: ${plugin_url}" >"$(tty)"
    return 1
  fi
}

get-plugin-branch() {
  local plugin_url=$1
  if [[ "${plugin_url}" =~ ^https://([^/]+)/([^/]+)/([^/]+)/blob/([^/]+)(/(.+))?/[^/]+$ ]]; then
    git_commit="${BASH_REMATCH[4]}"
    echo "${git_commit}"
  else
    red "ERROR: Could not extract git branch/commit from URL: ${plugin_url}" >"$(tty)"
    return 1
  fi
}

# Returns the relative path to the plugin file within the repo
get-plugin-relative-path() {
  local plugin_url=$1
  if [[ "${plugin_url}" =~ ^https://[^/]+/[^/]+/[^/]+/blob/[^/]+/(.+)$ ]]; then
    git_commit="${BASH_REMATCH[1]}"
    echo "${git_commit}"
  else
    red "ERROR: Could not extract git branch/commit from URL: ${plugin_url}" >"$(tty)"
    return 1
  fi
}

install-plugin() {
  local plugin_url=$1
  local plugin_dir plugin_relative_path

  yellow "Installing plugin: ${plugin_str}"

  # extract the plugin's 'name' and create a directory for it
  plugin_dir="$(get-plugin-dir "${plugin_url}")"

  # check to see if the path exists already, if so skip the clone
  if [[ ! -d "${plugin_dir}" ]]; then
    yellow "Creating directory for plugin: ${plugin_dir}"
    mkdir -p "${plugin_dir}"

    git clone --depth=1 --recursive -b "$(get-plugin-branch "${plugin_url}")" "$(get-repo-path "${plugin_url}")" "${plugin_dir}" 1>/dev/null
  fi

  # Write an entry to the manifest file
  plugin_relative_path="$(get-plugin-relative-path "${plugin_url}")"
  local_path="${plugin_dir}/${plugin_relative_path}"

  # Write the path to the plugin file to the 'manifest' file
  touch "${rad_lite_manifest}"
  if ! grep -q "${local_path}" "${rad_lite_manifest}"; then
    echo "${local_path}" >> "${rad_lite_manifest}"
  fi

  yellow "Installed plugin: ${plugin_url}"
}

# Set up the plugin directories and install plugins
install-cmd() {
  [[ $# == 0 ]] && { red "ERROR: Must pass a plugin file URL to 'rad-lite install'"; exit 1; }

  if [[ ! -d "${rad_lite_plugins_dir}" ]]; then
    yellow "Creating rad-shell-lite plugins directory: ${rad_lite_plugins_dir}"
    mkdir -p "${rad_lite_plugins_dir}"
  fi

  for plugin_str in "${@}"; do
    install-plugin "${plugin_str}"
  done

  green "Finished installing plugins"
}

# remove all files downloaded by rad-shell-lite
implode-cmd() {
  yellow "Removing all rad-shell-lite files"
  rm -rf "${rad_lite_dir}"
  green "rad-lite plugins have been removed"
}

list-cmd() {
  # List installed plugins in a format suitable for sourcing in a shell
  if [[ -d "${rad_lite_plugins_dir}" ]] && [[ -f "${rad_lite_manifest}" ]]; then
    cat "${rad_lite_manifest}"
  fi
}

init-cmd() {
  # Prints a shell script that can be eval'd by other shells (e.g., in a .bashrc) like so:
  # eval "$(rad-lite init)"
  if [[ -d "${rad_lite_plugins_dir}" ]] && [[ -f "${rad_lite_manifest}" ]]; then
    # Declare init hooks array
    echo "declare -a rad_plugin_init_hooks"

    # Source plugins and add init hooks
    cat "${rad_lite_manifest}" | while read -r line; do
      echo "source ${line}"
    done

    # Run all init hooks
    echo 'for init_hook in "${rad_plugin_init_hooks[@]}"; do'
    echo '   ${init_hook%%:*} ${init_hook##*:}'
    echo 'done'
  fi
}

help-cmd() {
  usage
  exit 0
}

[[ $# == 0 ]] && { usage; exit 1; }

# global variable used in multiple functions
rad_lite_dir="$HOME/.rad-shell-lite"
rad_lite_plugins_dir="$rad_lite_dir/plugins"

# The manifest is just a list of installed plugin urls
rad_lite_manifest="${rad_lite_dir}/manifest"

# Parse arguments
case $1 in
  install) shift; install-cmd "$@";;
  init)    shift; init-cmd "$@";;
  list)    shift; list-cmd "$@";;
  implode) shift; implode-cmd "$@";;
  help)    usage "$@"; exit 0;;
  *)
    usage
    exit 1
  ;;
esac
